/**
* monitor API generated from monitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "StatsJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

StatsJsonObject::StatsJsonObject() {
  m_tcpattemptfailsIsSet = false;
  m_tcpoutrstsIsSet = false;
  m_deliverrationIsSet = false;
  m_responseratioIsSet = false;
  m_timestampIsSet = false;
}

StatsJsonObject::StatsJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_tcpattemptfailsIsSet = false;
  m_tcpoutrstsIsSet = false;
  m_deliverrationIsSet = false;
  m_responseratioIsSet = false;
  m_timestampIsSet = false;


  if (val.count("tcpattemptfails")) {
    setTcpattemptfails(val.at("tcpattemptfails").get<uint64_t>());
  }

  if (val.count("tcpoutrsts")) {
    setTcpoutrsts(val.at("tcpoutrsts").get<uint64_t>());
  }

  if (val.count("deliverration")) {
    setDeliverration(val.at("deliverration").get<uint64_t>());
  }

  if (val.count("responseratio")) {
    setResponseratio(val.at("responseratio").get<uint64_t>());
  }

  if (val.count("timestamp")) {
    setTimestamp(val.at("timestamp").get<uint64_t>());
  }
}

nlohmann::json StatsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_tcpattemptfailsIsSet) {
    val["tcpattemptfails"] = m_tcpattemptfails;
  }

  if (m_tcpoutrstsIsSet) {
    val["tcpoutrsts"] = m_tcpoutrsts;
  }

  if (m_deliverrationIsSet) {
    val["deliverration"] = m_deliverration;
  }

  if (m_responseratioIsSet) {
    val["responseratio"] = m_responseratio;
  }

  if (m_timestampIsSet) {
    val["timestamp"] = m_timestamp;
  }

  return val;
}

uint64_t StatsJsonObject::getTcpattemptfails() const {
  return m_tcpattemptfails;
}

void StatsJsonObject::setTcpattemptfails(uint64_t value) {
  m_tcpattemptfails = value;
  m_tcpattemptfailsIsSet = true;
}

bool StatsJsonObject::tcpattemptfailsIsSet() const {
  return m_tcpattemptfailsIsSet;
}

void StatsJsonObject::unsetTcpattemptfails() {
  m_tcpattemptfailsIsSet = false;
}

uint64_t StatsJsonObject::getTcpoutrsts() const {
  return m_tcpoutrsts;
}

void StatsJsonObject::setTcpoutrsts(uint64_t value) {
  m_tcpoutrsts = value;
  m_tcpoutrstsIsSet = true;
}

bool StatsJsonObject::tcpoutrstsIsSet() const {
  return m_tcpoutrstsIsSet;
}

void StatsJsonObject::unsetTcpoutrsts() {
  m_tcpoutrstsIsSet = false;
}

uint64_t StatsJsonObject::getDeliverration() const {
  return m_deliverration;
}

void StatsJsonObject::setDeliverration(uint64_t value) {
  m_deliverration = value;
  m_deliverrationIsSet = true;
}

bool StatsJsonObject::deliverrationIsSet() const {
  return m_deliverrationIsSet;
}

void StatsJsonObject::unsetDeliverration() {
  m_deliverrationIsSet = false;
}

uint64_t StatsJsonObject::getResponseratio() const {
  return m_responseratio;
}

void StatsJsonObject::setResponseratio(uint64_t value) {
  m_responseratio = value;
  m_responseratioIsSet = true;
}

bool StatsJsonObject::responseratioIsSet() const {
  return m_responseratioIsSet;
}

void StatsJsonObject::unsetResponseratio() {
  m_responseratioIsSet = false;
}

uint64_t StatsJsonObject::getTimestamp() const {
  return m_timestamp;
}

void StatsJsonObject::setTimestamp(uint64_t value) {
  m_timestamp = value;
  m_timestampIsSet = true;
}

bool StatsJsonObject::timestampIsSet() const {
  return m_timestampIsSet;
}

void StatsJsonObject::unsetTimestamp() {
  m_timestampIsSet = false;
}


}
}
}

