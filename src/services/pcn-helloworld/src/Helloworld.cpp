/*
 * Copyright 2018 The Polycube Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Modify these methods with your own implementation

#include "Helloworld.h"

// files generated by cmake from "Helloworld_dp_{ingress, egress}.c
#include "Helloworld_dp_egress.h"
#include "Helloworld_dp_ingress.h"
#include "Helloworld_dp_ingress2.h"
#include "Helloworld_dp_ingress10.h"

using namespace polycube::service;

Helloworld::Helloworld(const std::string name, const HelloworldJsonObject &conf,
                       CubeType type)
    : Cube(name, {helloworld_code_ingress, helloworld_code_ingress2, helloworld_code_ingress10 }, {}, type, conf.getPolycubeLoglevel()) {
  //: Cube(name, {generate_code()}, type, conf.getPolycubeLoglevel()) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [helloworld] [%n] [%l] %v");
  // TODO: this should be done at initalization time
  if (conf.loglevelIsSet()) {
    setLoglevel(conf.getLoglevel());
  }

  logger()->info("Creating helloworld instance");

//  // TODO: action should have a default value, so the actionIsSet control could
//  // be ommitted.
//  if (conf.actionIsSet()) {
//    setAction(conf.getAction());
//  } else {
//    setAction(HelloworldActionEnum::DROP);
//  }
//
//  // set an initial state before doing any change to the configuration
//  // UINT16_MAX means that the port is not connected
//  auto ports_map = get_array_table<uint16_t>("ports_map");
//  ports_map.set(0, UINT16_MAX);
//  ports_map.set(1, UINT16_MAX);
//
//  addPortsList(conf.getPorts());
}

Helloworld::~Helloworld() {
  logger()->info("destroying helloworld instance");
}

void Helloworld::update(const HelloworldJsonObject &conf) {
  // This method updates all the object/parameter in Helloworld object specified
  // in the conf JsonObject.
  // You can modify this implementation.

  if (conf.loglevelIsSet()) {
    setLoglevel(conf.getLoglevel());
  }

//  if (conf.actionIsSet()) {
//    setAction(conf.getAction());
//  }

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
//      m->update(i);
    }
  }
}

HelloworldJsonObject Helloworld::toJsonObject() {
  HelloworldJsonObject conf;

  conf.setUuid(getUuid());

  conf.setLoglevel(getLoglevel());

  conf.setAction(getAction());

  conf.setType(getType());

  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }

  conf.setName(getName());

  return conf;
}

std::string Helloworld::generate_code() {
  return helloworld_code_ingress;
}

std::vector<std::string> Helloworld::generate_code_vector() {
  throw std::runtime_error("Method not implemented");
}

void Helloworld::packet_in(Ports &port, polycube::service::PacketInMetadata &md,
                           const std::vector<uint8_t> &packet) {
//  logger()->info("packet arrived to the slowpath from port {0}", port.name());
}

HelloworldActionEnum Helloworld::getAction() {
//  uint8_t value = get_array_table<uint8_t>("action_map").get(0x0);
//  return static_cast<HelloworldActionEnum>(value);
  return HelloworldActionEnum ::FORWARD;
}

void Helloworld::setAction(const HelloworldActionEnum &value) {
//  uint8_t action = static_cast<uint8_t>(value);
//  get_array_table<uint8_t>("action_map").set(0x0, action);
}
