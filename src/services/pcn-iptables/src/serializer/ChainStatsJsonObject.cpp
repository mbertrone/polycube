/**
* iptables API
* iptables API generated from iptables.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "ChainStatsJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

ChainStatsJsonObject::ChainStatsJsonObject() :
  m_idIsSet (false),
  m_pktsIsSet (false),
  m_bytesIsSet (false),
  m_descriptionIsSet (false) { }

ChainStatsJsonObject::ChainStatsJsonObject(nlohmann::json& val) :
  m_idIsSet (false),
  m_pktsIsSet (false),
  m_bytesIsSet (false),
  m_descriptionIsSet (false) {

  if (val.count("pkts") != 0) {
    setPkts(val.at("pkts").get<uint64_t>());
  }

  if (val.count("bytes") != 0) {
    setBytes(val.at("bytes"));
  }

  if (val.count("description") != 0) {
    setDescription(val.at("description"));
  }
}

nlohmann::json ChainStatsJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  val["id"] = m_id;
  if (m_pktsIsSet) {
    val["pkts"] = m_pkts;
  }

  if (m_bytesIsSet) {
    val["bytes"] = m_bytes;
  }

  if (m_descriptionIsSet) {
    val["description"] = m_description;
  }


  return val;
}

nlohmann::json ChainStatsJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["id"]["name"] = "id";
  val["id"]["type"] = "key";
  val["id"]["simpletype"] = "integer";
  val["id"]["description"] = R"POLYCUBE(Rule Identifier)POLYCUBE";
  val["id"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["pkts"]["name"] = "pkts";
  val["pkts"]["type"] = "leaf"; // Suppose that type is leaf
  val["pkts"]["simpletype"] = "integer";
  val["pkts"]["description"] = R"POLYCUBE(Number of packets matching the rule)POLYCUBE";
  val["pkts"]["example"] = R"POLYCUBE()POLYCUBE";
  val["bytes"]["name"] = "bytes";
  val["bytes"]["type"] = "leaf"; // Suppose that type is leaf
  val["bytes"]["simpletype"] = "integer";
  val["bytes"]["description"] = R"POLYCUBE(Number of bytes matching the rule)POLYCUBE";
  val["bytes"]["example"] = R"POLYCUBE()POLYCUBE";
  val["description"]["name"] = "description";
  val["description"]["type"] = "leaf"; // Suppose that type is leaf
  val["description"]["simpletype"] = "string";
  val["description"]["description"] = R"POLYCUBE(Description)POLYCUBE";
  val["description"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json ChainStatsJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json ChainStatsJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> ChainStatsJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

uint32_t ChainStatsJsonObject::getId() const {
  return m_id;
}

void ChainStatsJsonObject::setId(uint32_t value) {
  m_id = value;
  m_idIsSet = true;
}

bool ChainStatsJsonObject::idIsSet() const {
  return m_idIsSet;
}





uint64_t ChainStatsJsonObject::getPkts() const {
  return m_pkts;
}

void ChainStatsJsonObject::setPkts(uint64_t value) {
  m_pkts = value;
  m_pktsIsSet = true;
}

bool ChainStatsJsonObject::pktsIsSet() const {
  return m_pktsIsSet;
}

void ChainStatsJsonObject::unsetPkts() {
  m_pktsIsSet = false;
}



uint64_t ChainStatsJsonObject::getBytes() const {
  return m_bytes;
}

void ChainStatsJsonObject::setBytes(uint64_t value) {
  m_bytes = value;
  m_bytesIsSet = true;
}

bool ChainStatsJsonObject::bytesIsSet() const {
  return m_bytesIsSet;
}

void ChainStatsJsonObject::unsetBytes() {
  m_bytesIsSet = false;
}



std::string ChainStatsJsonObject::getDescription() const {
  return m_description;
}

void ChainStatsJsonObject::setDescription(std::string value) {
  m_description = value;
  m_descriptionIsSet = true;
}

bool ChainStatsJsonObject::descriptionIsSet() const {
  return m_descriptionIsSet;
}

void ChainStatsJsonObject::unsetDescription() {
  m_descriptionIsSet = false;
}




}
}
}
}

